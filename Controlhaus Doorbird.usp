/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Controlhaus Systems Design
System Name: Doorbird Module
System Number:
Programmer:	Patrick Murray
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

#USER_SIMPLSHARP_LIBRARY "ControlhausSimplSharpLibraryDoorbird"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT 
_SKIP_,
_SKIP_,
_SKIP_,
Debug,
Initialize,
LiveImageRefresh;

ANALOG_INPUT
HistoryImageRequest,
doorBellNotificationPulseTime,
motionSensorNotificationPulseTime,
doorOpenNotificationPulseTime,
doorBellNotificationRelaxationTime,
motionSensorNotificationRelaxationTime,
doorOpenNotificationRelaxationTime;

STRING_INPUT 
UserName[50],
Password[50],
DoorbirdHost[100],
Request[50];

DIGITAL_OUTPUT
_SKIP_,
_SKIP_,
_SKIP_,
_SKIP_,
_SKIP_,
_SKIP_,
_SKIP_,
_SKIP_,
_SKIP_,
_SKIP_,
_SKIP_,
doorbellNotificationIsOn,
doorbellNotificationIsOff,
motionsensorNotificationIsOn,
motionsensorNotificationIsOff,
dooropenNotificationIsOn,
dooropenNotificationIsOff,
_SKIP_,
doorBellNotificationPulse,
motionSensorNotificationPulse,
doorOpenNotificationPulse;

STRING_OUTPUT 
_SKIP_,
LiveVideoUrl,
LiveImageUrl,
HistoryImageUrl,
_SKIP_,
doorbellNotificationsUrl,
doorbellNotificationsUser,
doorbellNotificationsPassword,
_SKIP_,
motionsensorNotificationsUrl,
motionsensorNotificationsUser,
motionsensorNotificationsPassword,
_SKIP_,
dooropenNotificationsUrl,
dooropenNotificationsUser,
dooropenNotificationsPassword,
_SKIP_,
FIRMWARE,
BUILD_NUMBER,
WIFI_MAC_ADDR;                             

ANALOG_OUTPUT
doorbellNotificationsRelaxation,
motionsensorNotificationsRelaxation,
dooropenNotificationsRelaxation;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER
serverNotificationPort,
ProcessorEthernetAdapterId;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES ProcessorEthernetAdapterId
   propValidUnits = unitDecimal; // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   propBounds = 0d , 1d;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList =  { "0" , "" } , { "1" , "" };
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
 
#BEGIN_PARAMETER_PROPERTIES serverNotificationPort
   propValidUnits = unitDecimal;// unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   propDefaultUnit = unitDecimal;// unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   propDefaultValue = 8080d;// or, propDefaultValue = "";
   // propList =  { "0" , "" } , { "1" , "" };
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING eventIndex[24];

SimplSharpDoorbirdCommunications doorbirdCommunications;
SimplSharpDoorbirdUrls doorbirdUrls;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*Function init()
{
	RegisterEvent(myClassname, myEventHandler);
}
*/
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Initialize{
	doorbirdCommunications.initializeClient(Debug, UserName, Password, DoorbirdHost, ProcessorEthernetAdapterId, serverNotificationPort, doorBellNotificationRelaxationTime, motionSensorNotificationRelaxationTime, doorOpenNotificationRelaxationTime);
	LiveVideoUrl = doorbirdUrls.createLiveVideoUrl(UserName, Password, DoorbirdHost);
	LiveImageUrl = doorbirdUrls.createLiveImageUrl(UserName, Password, DoorbirdHost);
	RegisterDelegate(doorbirdCommunications,onSimplPlusDataHandler,doorbirdEvents);

}
CALLBACK FUNCTION doorbirdEvents(String key, String value)
{
	if (key = "FIRMWARE"){
			FIRMWARE = value; 
	}
    else if (key = "BUILD_NUMBER"){
			BUILD_NUMBER = value; 
	}
    else if (key = "FIRMWARE"){
			FIRMWARE = value; 
	}
    else if (key = "WIFI_MAC_ADDR"){
			WIFI_MAC_ADDR = value; 
	}
    else if (key = "event"){
		eventIndex = value;
	}
    else if (key = "subscribe"){
		if(eventIndex = "doorbell"){
			doorbellNotificationIsOn = value = "1";
			doorbellNotificationIsOff = value = "0";
		}
		else if(eventIndex = "motionsensor"){
			motionsensorNotificationIsOn = value = "1";
			motionsensorNotificationIsOff = value = "0";
		}
		else if(eventIndex = "dooropen"){
			dooropenNotificationIsOn = value = "1";
			dooropenNotificationIsOff = value = "0";
		}
	}
    else if (key = "url"){
		if(eventIndex = "doorbell"){
			doorbellNotificationsUrl = value;
		}
		else if(eventIndex = "motionsensor"){
			motionsensorNotificationsUrl = value;
		}
		else if(eventIndex = "dooropen"){
			dooropenNotificationsUrl = value;
		}
	}
    else if (key = "user"){
		if(eventIndex = "doorbell"){
			doorbellNotificationsUser = value;
		}
		else if(eventIndex = "motionsensor"){
			motionsensorNotificationsUser = value;
		}
		else if(eventIndex = "dooropen"){
			dooropenNotificationsUser = value;
		}
	}
    else if (key = "password"){
		if(eventIndex = "doorbell"){
			doorbellNotificationsPassword = value;
		}
		else if(eventIndex = "motionsensor"){
			motionsensorNotificationsPassword = value;
		}
		else if(eventIndex = "dooropen"){
			dooropenNotificationsPassword = value;
		}
	}
    else if (key = "relaxation"){
		if(eventIndex = "doorbell"){
			doorbellNotificationsRelaxation = atoi(value);
		}
		else if(eventIndex = "motionsensor"){
			motionsensorNotificationsRelaxation = atoi(value);
		}
		else if(eventIndex = "dooropen"){
			dooropenNotificationsRelaxation = atoi(value);
		}
	}
    else if (key = "FIRMWARE"){
			FIRMWARE = value; 
	}
    else if (key = "notifications"){
		if (value = "/doorBellNotification"){
			pulse((doorBellNotificationPulseTime * 100), doorBellNotificationPulse);
		}
		else if (value = "/motionSensorNotification"){
			pulse((motionSensorNotificationPulseTime * 100), motionSensorNotificationPulse);
		}
		else if (value = "/doorOpenNotification"){
			pulse((doorOpenNotificationPulseTime * 100), doorOpenNotificationPulse);
		}
	}
}
                                  
CHANGE Request{
 	doorbirdCommunications.request(Request);
}

PUSH LiveImageRefresh{
	LiveImageUrl = doorbirdUrls.createLiveImageUrl(UserName, Password, DoorbirdHost);

}

CHANGE HistoryImageRequest{
	HistoryImageUrl = doorbirdUrls.createHistoryImageUrl(UserName, Password, DoorbirdHost, HistoryImageRequest);

}

CHANGE doorBellNotificationRelaxationTime{
	doorbirdCommunications.setDoorBellNotificationRelaxationTime(doorBellNotificationRelaxationTime);

}

CHANGE motionSensorNotificationRelaxationTime{
	doorbirdCommunications.setMotionSensorNotificationRelaxationTime(motionSensorNotificationRelaxationTime);

}

CHANGE doorOpenNotificationRelaxationTime{
	doorbirdCommunications.setDoorOpenNotificationRelaxationTime(doorOpenNotificationRelaxationTime);

}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
	WaitForInitializationComplete();	
}
*/
